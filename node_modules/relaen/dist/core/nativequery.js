"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NativeQuery = void 0;
const sqlexecutor_1 = require("./sqlexecutor");
const types_1 = require("./types");
const entityfactory_1 = require("./entityfactory");
const query_1 = require("./query");
const entitymanagerfactory_1 = require("./entitymanagerfactory");
const baseentity_1 = require("./baseentity");
/**
 * 原生查询
 */
class NativeQuery extends query_1.Query {
    /**
     * 构造原生查询对象
     * @param sql               sql语句
     * @param em                entity manager
     * @param entityClassName   实体类名
     */
    constructor(sql, em, entityClassName) {
        super(em, entityClassName);
        this.execSql = sql;
    }
    /**
     * 设置查询参数值，占位符支持下标和字符串
     * @param index     占位符
     * @param value     参数值
     * @since 0.4.0
     */
    setParameter(index, value) {
        if (!this.paramArr) {
            this.paramArr = typeof index === 'number' ? [] : {};
        }
        //补全参数个数
        if (Array.isArray(this.paramArr) && this.paramArr.length <= index) {
            for (let i = this.paramArr.length; i <= index; i++) {
                this.paramArr.push(null);
            }
        }
        //对于entity，只获取其主键
        this.paramArr[index] = value instanceof baseentity_1.BaseEntity ? entityfactory_1.EntityFactory.getIdValue(value) : value;
    }
    /**
     * 设置多个参数值，数组从下标0开始|对象以属性名绑定
     * @param valueArr 值数组|值对象
     * @since 0.4.0
     */
    setParameters(valueArr) {
        if (Array.isArray(valueArr)) {
            this.paramArr = this.paramArr || [];
            valueArr.forEach((value, i) => {
                //对于entity，只获取其主键
                let v = value instanceof baseentity_1.BaseEntity ? entityfactory_1.EntityFactory.getIdValue(value) : value;
                if (Array.isArray(this.paramArr) && i >= this.paramArr.length) {
                    this.paramArr.push(v);
                }
                else {
                    this.paramArr[i] = v;
                }
            });
        }
        else {
            this.paramArr = this.paramArr || {};
            Object.getOwnPropertyNames(valueArr).forEach((item) => {
                let value = valueArr[item];
                //对于entity，只获取其主键
                let v = value instanceof baseentity_1.BaseEntity ? entityfactory_1.EntityFactory.getIdValue(value) : value;
                this.paramArr[item] = v;
            });
        }
    }
    /**
     * 获取单个实体或单个属性值
     * @returns     结果
     */
    async getResult() {
        if (!this.execSql) {
            return null;
        }
        let isSelect = this.execSql.trim().substr(0, 6).toLowerCase() === 'select' ? true : false;
        //为查询执行
        if (isSelect) {
            let results = await this.getResultList(0, 1);
            if (results && results.length > 0) {
                let props = Object.getOwnPropertyNames(results[0]);
                //如果只有一个属性，则只返回属性值
                if (props.length === 1) {
                    return results[0][props[0]];
                }
                return results[0];
            }
            return null;
        }
        //执行原生
        return await sqlexecutor_1.SqlExecutor.exec(this.entityManager, this.execSql, this.paramArr);
    }
    /**
     * 获取结果列表
     * @param start     开始索引
     * @param limit     记录数
     * @returns         结果集
     */
    async getResultList(start, limit) {
        this.setStart(start);
        this.setLimit(limit);
        let results = await sqlexecutor_1.SqlExecutor.exec(this.entityManager, this.execSql, this.paramArr, this.start, this.limit);
        if (results && Array.isArray(results)) {
            let arr = [];
            for (let r of results) {
                arr.push(this.genOne(r));
            }
            return arr;
        }
        return results;
    }
    /**
     * 根据查询结果生成单个数据对象
     * @param r     原生查询结果
     * @returns     转化实体对象
     */
    genOne(r) {
        if (this.entityClassName) {
            let ecfg = entityfactory_1.EntityFactory.getEntityConfig(this.entityClassName);
            if (ecfg) { //具备该实体类，则处理为实体
                //外键map
                let entity = new ecfg.entity();
                for (let col of ecfg.columns) {
                    let c = col[1];
                    //该字段无值或是外键
                    if (r[c.name] === null || r[c.name] === undefined || c.refName) {
                        continue;
                    }
                    entity[col[0]] = r[c.name];
                }
                //设置状态
                entitymanagerfactory_1.EntityManagerFactory.setEntityStatus(entity, types_1.EEntityState.PERSIST);
                return entity;
            }
        }
        let obj = {};
        Object.getOwnPropertyNames(r).forEach(item => {
            obj[item] = r[item];
        });
        return obj;
    }
}
exports.NativeQuery = NativeQuery;
//# sourceMappingURL=nativequery.js.map