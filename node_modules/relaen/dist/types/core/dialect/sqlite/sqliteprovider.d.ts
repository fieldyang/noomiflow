import { BaseProvider } from "../../baseprovider";
import { Connection } from "../../connection";
import { ISqliteConnectionCfg } from "./sqliteoptions";
/**
 * sqlite provider
 * @since 0.4.0
 */
export declare class SqliteProvider extends BaseProvider {
    /**
     * SQLITE_BUSY 重复执行时间
     */
    private busyErrorRetry;
    /**
     * SQLITE_BUSY retry重复执行超时时间
     */
    private busyTimeout;
    /**
     * 构造器
     * @param cfg   连接配置
     */
    constructor(cfg: ISqliteConnectionCfg);
    /**
     * 获取连接
     * @throws      连接错误
     * @returns     数据库连接
     */
    getConnection(): Promise<any>;
    /**
     * 关闭连接
     * @throws           连接错误
     * @param connection 数据库连接对象
     */
    closeConnection(connection: Connection): Promise<any>;
    /**
     * 执行sql语句
     * @param connection    db connection
     * @param sql           待执行sql
     * @param params        参数数组
     * @returns             结果(集)
     */
    exec(connection: Connection, sql: string, params?: any[] | object): Promise<any>;
    /**
     * 处理记录起始记录索引和记录数
     * @param sql       sql
     * @param start     开始索引
     * @param limit     记录数
     * @returns         处理后的sql
     * @since           0.2.0
     */
    handleStartAndLimit(sql: string, start?: number, limit?: number): string;
    /**
     * 从sql执行结果获取identityid，仅对主键生成策略是identity的有效
     * @param result    sql执行结果
     * @returns         主键
     */
    getIdentityId(result: any): number;
}
