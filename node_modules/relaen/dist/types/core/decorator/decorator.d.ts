import { IEntityPKey, IEntityColumn, IEntityRelation, IEntityRefColumn, IJoinTable } from "../types";
/**
 * 装饰器（注解类）
 */
/**
 * @exclude
 * Entity装饰器，装饰实体(表)，装饰类
 * @param tblName   表名
 * @param schema    数据库名
 */
declare function Entity(tblName: string, schema?: string): (target: any) => void;
/**
 * @exclude
 * 主键装饰器，装饰属性
 * @param cfg       配置项
 */
declare function Id(cfg?: IEntityPKey): (target: any, propertyName: string) => void;
/**
 * @exclude
 * 字段装饰器，装饰属性
 * @param cfg 配置项
 */
declare function Column(cfg: IEntityColumn): (target: any, propertyName: string) => void;
/**
 * @exclude
 * 版本号装饰器，乐观锁时有效，装饰属性
 */
declare function Version(): (target: any, propertyName: string) => void;
/**
 * @exclude
 * 字段装饰器，装饰属性
 * @param cfg 配置项
 */
declare function JoinTable(cfg: IJoinTable): (target: any, propertyName: string) => void;
/**
 * @exclude
 * 字段装饰器，装饰属性
 * @param cfg 配置项
 */
declare function JoinColumn(cfg: IEntityRefColumn): (target: any, propertyName: string) => void;
/**
 * @exclude
 * 一对多关系，装饰属性
 * @param cfg   实体关系配置
 */
declare function OneToMany(cfg: IEntityRelation): (target: any, propertyName: string) => void;
/**
 * @exclude
 * 一对一关系，装饰属性
 * @param cfg   实体关系配置
 */
declare function OneToOne(cfg: IEntityRelation): (target: any, propertyName: string) => void;
/**
 * @exclude
 * 多对一关系，装饰属性
 * @param cfg   实体关系配置
 */
declare function ManyToOne(cfg: IEntityRelation): (target: any, propertyName: string) => void;
/**
 * @exclude
 * 多对多关系，装饰属性
 * @param cfg   实体关系配置
 */
declare function ManyToMany(cfg: IEntityRelation): (target: any, propertyName: string) => void;
export { Entity, Id, Column, Version, JoinTable, JoinColumn, OneToMany, OneToOne, ManyToOne, ManyToMany };
